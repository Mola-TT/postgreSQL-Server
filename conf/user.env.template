# user.env.template - Template for user environment variables
# Copy this file to user.env and customize as needed
# Part of Milestone 2, 3, 4, 5 & 6

# General settings
SERVER_TIMEZONE="Asia/Hong_Kong"
LOG_LEVEL="INFO"
# Whether to update system packages during initialization
SYSTEM_UPDATE=true
# Whether to run tests after installation
RUN_TESTS=true
# Whether to use Let's Encrypt production environment (false uses staging for testing)
PRODUCTION=false

# Firewall configuration
ENABLE_FIREWALL=true
CONFIGURE_FIREWALL=true

# PostgreSQL configuration
# IMPORTANT: Change this password to a secure value
PG_SUPERUSER_PASSWORD="secure-password-here"
# Database name to create (default is postgres)
PG_DATABASE="dbhub"
# PostgreSQL port (default is 5432)
DB_PORT=5432
# Enable SSL for PostgreSQL connections
PG_ENABLE_SSL=true

# pgbouncer configuration
# Port pgbouncer listens on for connections
PGB_LISTEN_PORT=6432
# Address pgbouncer listens on (* for all interfaces)
PGB_LISTEN_ADDR="*"
# Authentication type (scram-sha-256 is recommended for security)
PGB_AUTH_TYPE="scram-sha-256"
# Pool mode (transaction, session, or statement)
PGB_POOL_MODE="transaction"
# Maximum number of client connections
PGB_MAX_CLIENT_CONN=100
# Default pool size per user/database
PGB_DEFAULT_POOL_SIZE=20
# Startup parameters to ignore (separate with commas if multiple)
PGB_IGNORE_PARAMS="extra_float_digits"

# Nginx configuration
# Domain name for SSL certificate and subdomain mapping
# Set to your actual domain to enable subdomain-to-database mapping
NGINX_DOMAIN="example.com"
# Email address for SSL certificate notifications
SSL_EMAIL="admin@example.com"

# Let's Encrypt with Cloudflare DNS settings for wildcard certificates
# Enabled for wildcard certificates (*.example.com)
USE_CLOUDFLARE_DNS=false
# Cloudflare API token with Zone.Zone:Read and Zone.DNS:Edit permissions
CLOUDFLARE_API_TOKEN="your-cloudflare-api-token"

# Netdata configuration
# Hostname displayed in Netdata UI
NETDATA_HOSTNAME="PostgreSQL Server"
# Email sender for alerts
NETDATA_EMAIL_SENDER="netdata@example.com"
# Email recipient to receive alerts
NETDATA_EMAIL_RECIPIENT="admin@example.com"
# SMTP server for sending email alerts
NETDATA_SMTP_SERVER="smtp.example.com"
# SMTP port
NETDATA_SMTP_PORT=587
# Whether to use TLS for SMTP (YES/NO)
NETDATA_SMTP_TLS="YES"
# SMTP username if required
NETDATA_SMTP_USERNAME="smtp_user"
# SMTP password if required
NETDATA_SMTP_PASSWORD="smtp_password"
# Username for Netdata web interface
NETDATA_ADMIN_USER="admin"
# Password for Netdata web interface (leave empty for random)
NETDATA_ADMIN_PASSWORD="secure_password"

# SSL renewal configuration
# Enable/disable automatic SSL certificate renewal
SSL_AUTO_RENEWAL=true

# Email to receive SSL certificate renewal notifications
SSL_RENEWAL_REMINDER_EMAIL="admin@example.com"

# Directory for renewal hooks scripts (default: /etc/letsencrypt/renewal-hooks/post)
SSL_HOOKS_DIR="/etc/letsencrypt/renewal-hooks/post"

# Log file for renewal process (default: /var/log/letsencrypt-renewal.log)
SSL_RENEWAL_LOG="/var/log/letsencrypt-renewal.log"

# Dynamic optimization configuration
# Enable/disable dynamic PostgreSQL optimization
ENABLE_DYNAMIC_OPTIMIZATION=true

# Backup directory for PostgreSQL configurations before optimization
PG_CONFIG_BACKUP_DIR="/var/lib/postgresql/config_backups"

# Optimization report directory
OPTIMIZATION_REPORT_DIR="/var/lib/postgresql/optimization_reports"

# Hardware change detector configuration
# Enable/disable hardware change detection service
ENABLE_HARDWARE_CHANGE_DETECTOR=true

# Hardware specifications file location
HARDWARE_SPECS_FILE="/var/lib/postgresql/hardware_specs.json"

# Production hours (when to use phased optimization)
PRODUCTION_HOURS_START=8
PRODUCTION_HOURS_END=20

# Change threshold percentage for triggering optimization (1-100)
HARDWARE_CHANGE_THRESHOLD=10

# Hardware change email notification settings
# Enable/disable email notifications for hardware changes
HARDWARE_CHANGE_EMAIL_ENABLED=true
# Email recipient for hardware change notifications
HARDWARE_CHANGE_EMAIL_RECIPIENT="admin@example.com"
# Email sender address
HARDWARE_CHANGE_EMAIL_SENDER="postgres@example.com"
# Email subject for hardware change notifications
HARDWARE_CHANGE_EMAIL_SUBJECT="[ALERT] Hardware Change Detected on PostgreSQL Server"
# Email subject for optimization completion notifications
OPTIMIZATION_EMAIL_SUBJECT="PostgreSQL Server Optimization Completed"
# Email subject for test emails
TEST_EMAIL_SUBJECT="[TEST] PostgreSQL Server Email Test"

# Backup configuration
# Enable/disable automated PostgreSQL backups
ENABLE_BACKUPS=true

# Directory to store backups
BACKUP_DIR="/var/lib/postgresql/backups"

# Retention policy for backups
BACKUP_RETENTION_DAYS=7     # Keep daily backups for 7 days
BACKUP_RETENTION_WEEKS=4    # Keep weekly backups for 4 weeks
BACKUP_RETENTION_MONTHS=12  # Keep monthly backups for 12 months

# Backup compression settings
BACKUP_COMPRESSION=true           # Enable backup compression
BACKUP_COMPRESSION_LEVEL=6        # Compression level (1-9, where 9 is highest compression)

# Backup encryption settings
BACKUP_ENCRYPTION=false           # Enable backup encryption
BACKUP_ENCRYPTION_KEY=""          # Encryption key (leave empty to generate a random key)

# Backup schedule (cron format)
BACKUP_SCHEDULE_FULL="0 1 * * 0"       # Weekly full backup at 1:00 AM on Sunday
BACKUP_SCHEDULE_INCREMENTAL="0 1 * * 1-6"  # Daily incremental backup at 1:00 AM Monday-Saturday

# Performance settings
BACKUP_MAX_PARALLEL_JOBS=2        # Maximum number of parallel backup jobs

# Email notification settings
BACKUP_EMAIL_NOTIFICATIONS=true   # Enable email notifications for backups
BACKUP_EMAIL_RECIPIENT="admin@example.com"  # Email recipient for backup notifications
BACKUP_EMAIL_SENDER="postgres@example.com"  # Email sender for backup notifications
BACKUP_SUCCESS_EMAIL_SUBJECT="[SUCCESS] PostgreSQL Backup Completed"  # Subject for successful backup emails
BACKUP_FAILURE_EMAIL_SUBJECT="[FAILURE] PostgreSQL Backup Failed"     # Subject for failed backup emails

# Backup verification settings
BACKUP_VERIFICATION=true          # Enable backup verification
BACKUP_VERIFICATION_SCHEDULE="0 3 * * *"  # Daily verification at 3:00 AM

# New option: Backup email on error only
BACKUP_EMAIL_ON_ERROR_ONLY=false    # When true, only send emails on backup failure