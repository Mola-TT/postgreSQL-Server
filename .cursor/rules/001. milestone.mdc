---
description: 
globs: 
alwaysApply: true
---
# Milestone

## Current Progress: Milestone 4

## Milestone 4
- Create netdata_config.sh under setup folder
- Install and config netdata show that I can monitor the system resources through only https
- Send me email alert once one of the cpu usage, disk usage or memory usage is over 80%

## Milestone 3
- Created `nginx_config.sh` under setup folder to:
  - Install and configure Nginx as a secure proxy for PostgreSQL
  - Configure SSL using Let's Encrypt with fallback to self-signed certificates
  - Implement automatic subdomain-to-database mapping (e.g., bestdb.domain.com connects to bestdb database)
  - Configure firewall rules to expose Nginx ports (80/443) while restricting direct PostgreSQL access
  - Update pgbouncer configuration for wildcard database handling
  - Ensure all connections to PostgreSQL are secured with SSL through port 6432 via pgbouncer
  - Provide robust error handling and silent installation
- Updated `init.sh` to include Nginx configuration in the initialization process
- Enhanced environment configuration:
  - Added Nginx-specific settings to default.env and user.env.template
  - Added SSL certificate configuration options
  - Added domain name configuration for subdomain mapping

## Milestone 2
- Restructured project for better organization:
  - Moved utility scripts to `lib/` directory
  - Moved configuration files to `conf/` directory
  - Updated all file references to match the new structure
- Created `postgresql_config.sh` under setup folder that:
  - Installs PostgreSQL using the official repository
  - Installs pgbouncer for connection pooling
  - Configures PostgreSQL with proper security settings:
    - Uses secure scram-sha-256 authentication instead of md5
    - Restricts direct PostgreSQL access to local connections only
    - Routes all external connections through pgbouncer
    - Configures firewall to enforce this connection policy
  - Sets up pgbouncer as middleware:
    - Uses a simplified, reliable configuration approach
    - Implements robust configuration verification without error messages
    - Includes automatic fallback to simpler configuration if needed
    - Features multiple verification methods for password hash extraction
  - Creates user-specified database
  - Configures client authentication based on user-defined IP ranges
  - Sets and secures PostgreSQL superuser password
  - Uses environment variables for all configuration settings
- Updated `init.sh` to include PostgreSQL installation and configuration
- Enhanced environment configuration:
  - Added PostgreSQL-specific settings to default.env and user.env.template
  - Added pgbouncer configuration settings
  - Added PostgreSQL superuser password management
  - Added SYSTEM_UPDATE and RUN_TESTS environment variables
  - Improved timezone configuration with proper variable handling
  - Set timezone to Asia/Hong_Kong
  - Enabled automatic test execution
- Improved logging and error handling:
  - Ensured clean, error-free logs during normal operation
  - Implemented graceful fallback mechanisms for configuration issues
  - Added verification steps for all critical components
  - Fixed timezone error by properly handling timezone variables
  - Added backward compatibility for legacy variable references

## Milestone 1

1. Created an `init.sh` script that:
   - Updates the Ubuntu server silently
   - Sets up timezone directly from configuration
   - Checks if running as root
   - Loads environment variables
   - Provides proper initialization flow

2. Created a `logger.sh` script with logging functions:
   - Implemented color-coded log levels (DEBUG, INFO, WARNING, ERROR)
   - Made log message timestamps bold
   - Made log messages white by default
   - Applied colors only to log level text
   - Added file logging capability

3. Created environment configuration:
   - Added `default.env` with default configuration
   - Added `user.env.template` for user-specific settings
   - Implemented environment variable override logic

4. Added utility functions:
   - Created `utilities.sh` with helper functions
   - Implemented `execute_silently` for quiet command execution
   - Added log file management

5. Created general configuration:
   - Added system update functionality
   - Added timezone configuration


