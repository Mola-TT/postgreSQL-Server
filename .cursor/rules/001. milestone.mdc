---
description: 
globs: 
alwaysApply: true
---
# Milestone

## Current Progress: Milestone 5 (Completed)

## Milestone 5
- Created `ssl_renewal.sh` under setup folder that:
  - Set up automatic renewal of Let's Encrypt SSL certificates
  - Configured proper renewal hooks to restart/reload necessary services after renewal
  - Implemented fallback mechanisms for when renewal might fail
  - Created detailed logging for renewal processes
  - Ensured proper file permissions for certificate files
  - Included graceful error handling with clear error messages
  - Configured different certificate renewal approaches based on validation method (HTTP vs DNS)
  - Added special handling for DNS propagation delays in Cloudflare DNS validation
  - Implemented non-production mode with minimal renewal reminders when certbot isn't available
- Created comprehensive test script (`test_ssl_renewal.sh`) to validate:
  - Proper certificate renewal configuration (without actually performing renewal)
  - Renewal hooks functionality
  - Proper permissions on SSL certificate files
  - Simulated renewal process with dry-run
  - Log file creation and error reporting
  - Added specific handling for non-production environments
  - Provided detailed diagnostics for renewal simulation failures
- Updated init.sh and logger.sh:
  - Added SSL renewal configuration in the initialization process
  - Enhanced logging with green PASS output for test successes
  - Improved output formatting with consistent timestamps and spacing
  - Added empty lines between test sections for improved readability
- Enhanced error handling and logging:
  - Implemented detailed error reporting for renewal failures
  - Added verification steps for renewal configuration
  - Created troubleshooting guidance in log messages
  - Added validation checks to prevent common renewal issues
  - Suppressed SQL command outputs to keep logs clean and focused
  - Created helper functions for executing PostgreSQL commands silently
- Fixed bugs and improved robustness:
  - Fixed Let's Encrypt certificate handling with PRODUCTION=false environments
  - Added robust certbot installation with retry logic and verification
  - Enhanced test sequence to ensure proper dependencies between tests
  - Increased DNS propagation delay time for Cloudflare validation from 10s to 60s
  - Tagged code with Milestone_5 for version control and release management

## Milestone 4
- Created `netdata_config.sh` under setup folder that:
  - Installs Netdata for system resource monitoring
  - Configures Netdata to listen only on localhost for security
  - Sets up Nginx as a secure HTTPS proxy for Netdata dashboard access
  - Implements basic authentication for Netdata web interface
  - Configures SSL using Let's Encrypt certificates with proper staging/production environment support
  - Creates health alert notifications for CPU, RAM, and disk usage thresholds at 80%
  - Configures email alerts when system resources exceed thresholds
  - Configures firewall rules to block direct access to Netdata port (19999)
- Created comprehensive test script (`test_netdata.sh`) to validate:
  - Internal Netdata accessibility on localhost
  - External Netdata accessibility via HTTPS proxy
  - Authentication with proper credentials
  - HTTP to HTTPS redirection
  - Firewall configuration blocking direct access
- Enhanced environment configuration:
  - Added Netdata-specific settings to environment files
  - Added email notification configuration options
  - Added PRODUCTION flag to control Let's Encrypt staging vs production environments
  - Added secure credential storage mechanisms
- Improved error handling and logging:
  - Implemented detailed error reporting for certificate acquisition failures
  - Added proper service status verification
  - Fixed configuration bugs related to WebSocket support
  - Added troubleshooting guidance in log messages

## Milestone 3
- Created `nginx_config.sh` under setup folder to:
  - Install and configure Nginx as a secure proxy for PostgreSQL
  - Configure SSL using Let's Encrypt with fallback to self-signed certificates
  - Implement automatic subdomain-to-database mapping (e.g., bestdb.domain.com connects to bestdb database)
  - Configure firewall rules to expose Nginx ports (80/443) while restricting direct PostgreSQL access
  - Update pgbouncer configuration for wildcard database handling
  - Ensure all connections to PostgreSQL are secured with SSL through port 6432 via pgbouncer
  - Provide robust error handling and silent installation
- Updated `init.sh` to include Nginx configuration in the initialization process
- Enhanced environment configuration:
  - Added Nginx-specific settings to default.env and user.env.template
  - Added SSL certificate configuration options
  - Added domain name configuration for subdomain mapping

## Milestone 2
- Restructured project for better organization:
  - Moved utility scripts to `lib/` directory
  - Moved configuration files to `conf/` directory
  - Updated all file references to match the new structure
- Created `postgresql_config.sh` under setup folder that:
  - Installs PostgreSQL using the official repository
  - Installs pgbouncer for connection pooling
  - Configures PostgreSQL with proper security settings:
    - Uses secure scram-sha-256 authentication instead of md5
    - Restricts direct PostgreSQL access to local connections only
    - Routes all external connections through pgbouncer
    - Configures firewall to enforce this connection policy
  - Sets up pgbouncer as middleware:
    - Uses a simplified, reliable configuration approach
    - Implements robust configuration verification without error messages
    - Includes automatic fallback to simpler configuration if needed
    - Features multiple verification methods for password hash extraction
  - Creates user-specified database
  - Configures client authentication based on user-defined IP ranges
  - Sets and secures PostgreSQL superuser password
  - Uses environment variables for all configuration settings
- Updated `init.sh` to include PostgreSQL installation and configuration
- Enhanced environment configuration:
  - Added PostgreSQL-specific settings to default.env and user.env.template
  - Added pgbouncer configuration settings
  - Added PostgreSQL superuser password management
  - Added SYSTEM_UPDATE and RUN_TESTS environment variables
  - Improved timezone configuration with proper variable handling
  - Set timezone to Asia/Hong_Kong
  - Enabled automatic test execution
- Improved logging and error handling:
  - Ensured clean, error-free logs during normal operation
  - Implemented graceful fallback mechanisms for configuration issues
  - Added verification steps for all critical components
  - Fixed timezone error by properly handling timezone variables
  - Added backward compatibility for legacy variable references

## Milestone 1
- Created an `init.sh` script that:
  - Updates the Ubuntu server silently
  - Sets up timezone directly from configuration
  - Checks if running as root
  - Loads environment variables
  - Provides proper initialization flow
- Created a `logger.sh` script with logging functions:
  - Implemented color-coded log levels (DEBUG, INFO, WARNING, ERROR)
  - Made log message timestamps bold
  - Made log messages white by default
  - Applied colors only to log level text
  - Added file logging capability
- Created environment configuration:
  - Added `default.env` with default configuration
  - Added `user.env.template` for user-specific settings
  - Implemented environment variable override logic
- Added utility functions:
  - Created `utilities.sh` with helper functions
  - Implemented `execute_silently` for quiet command execution
  - Added log file management
- Created general configuration:
  - Added system update functionality
  - Added timezone configuration


