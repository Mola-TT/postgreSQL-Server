#!/bin/bash
# netdata_config.sh - Installs and configures Netdata for system resource monitoring
# Part of Milestone 4
# This script installs and configures Netdata to monitor system resources via HTTPS
# and send email alerts when resource usage exceeds thresholds

# Exit immediately if a command exits with a non-zero status
set -e

# Script directory - using unique variable name to avoid conflicts
NETDATA_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NETDATA_LIB_DIR="$NETDATA_SCRIPT_DIR/../lib"

# Check if lib directory exists
if [ ! -d "$NETDATA_LIB_DIR" ]; then
  # Try parent directory
  NETDATA_LIB_DIR="$(dirname "$NETDATA_SCRIPT_DIR")/lib"
  
  if [ ! -d "$NETDATA_LIB_DIR" ]; then
    echo "ERROR: Unable to locate lib directory"
    exit 1
  fi
fi

# Source the logger functions
if [ -f "$NETDATA_LIB_DIR/logger.sh" ]; then
  source "$NETDATA_LIB_DIR/logger.sh"
else
  echo "ERROR: Logger library not found at $NETDATA_LIB_DIR/logger.sh"
  exit 1
fi

# Source utilities
if [ -f "$NETDATA_LIB_DIR/utilities.sh" ]; then
  source "$NETDATA_LIB_DIR/utilities.sh"
else
  echo "ERROR: Utilities library not found at $NETDATA_LIB_DIR/utilities.sh"
  exit 1
fi

# Source PostgreSQL utilities for consistent SQL execution
if [ -f "$NETDATA_LIB_DIR/pg_extract_hash.sh" ]; then
  source "$NETDATA_LIB_DIR/pg_extract_hash.sh"
fi

# Install Netdata if not already installed
install_netdata() {
  log_info "Installing Netdata..."
  
  # Check if Netdata is already installed
  if command -v netdata >/dev/null 2>&1; then
    log_info "Netdata is already installed, skipping installation"
    return 0
  fi
  
  # Install dependencies
  log_info "Installing Netdata dependencies..."
  local install_log="/tmp/netdata_install_$$.log"
  
  # Try installing dependencies with detailed error logging
  if ! apt_update_with_retry 5 30; then
    log_warn "Failed to update package index, but will try to continue"
  fi
  
  # Install dependencies with retry logic
  if ! apt_install_with_retry "curl wget zlib1g-dev util-linux apache2-utils build-essential uuid-dev libmnl-dev" 3 20; then
    log_warn "Failed to install all dependencies, but will try to continue with basic ones"
    
    # Try minimal dependencies
    if ! apt_install_with_retry "curl wget" 3 20; then
      log_error "Failed to install even basic dependencies for Netdata"
      return 1
    fi
  fi
  
  # Install Netdata using the official script with automatic defaults
  log_info "Downloading and running Netdata installer..."
  curl -sSf https://get.netdata.cloud/kickstart.sh > /tmp/netdata_kickstart.sh 2> "$install_log" || {
    log_error "Failed to download Netdata installer script"
    cat "$install_log"
    rm -f "$install_log"
    return 1
  }
  
  # Run the installer with safety flags
  bash /tmp/netdata_kickstart.sh --non-interactive --stable-channel --disable-telemetry --disable-cloud --dont-wait > "$install_log" 2>&1
  
  # Check if installation was successful
  if command -v netdata >/dev/null 2>&1 || [ -f "/usr/sbin/netdata" ] || [ -f "/opt/netdata/bin/netdata" ]; then
    log_info "Netdata installed successfully"
    rm -f "$install_log" /tmp/netdata_kickstart.sh
    return 0
  else
    log_error "Netdata installation failed - checking installation log"
    cat "$install_log" | grep -i "error\|failed\|warning" | head -20 | while read -r line; do
      log_error "  $line"
    done
    
    # Try alternative installation method
    log_info "Trying alternative Netdata installation method..."
    DEBIAN_FRONTEND=noninteractive apt-get install -y -qq netdata > "$install_log" 2>&1
    
    if command -v netdata >/dev/null 2>&1 || [ -f "/usr/sbin/netdata" ]; then
      log_info "Netdata installed successfully using alternative method"
      rm -f "$install_log" /tmp/netdata_kickstart.sh
      return 0
    else
      log_error "All Netdata installation methods failed"
      rm -f "$install_log" /tmp/netdata_kickstart.sh
      return 1
    fi
  fi
}

# Configure Netdata to use HTTPS only and set up email alerts
configure_netdata() {
  log_info "Configuring Netdata..."
  
  # Check if Netdata is installed properly
  if ! command -v netdata >/dev/null 2>&1; then
    log_error "Netdata is not installed, cannot configure"
    return 1
  fi
  
  # Get the configuration directory
  local netdata_conf_dir="/etc/netdata"
  
  # Ensure the configuration directory exists
  if [ ! -d "$netdata_conf_dir" ]; then
    log_error "Netdata configuration directory not found: $netdata_conf_dir"
    return 1
  fi
  
  # Backup original configuration files
  if [ -f "$netdata_conf_dir/netdata.conf" ]; then
    cp "$netdata_conf_dir/netdata.conf" "$netdata_conf_dir/netdata.conf.bak" 2>/dev/null
  fi
  
  # Create or update the main configuration file
  log_info "Updating Netdata main configuration..."
  
  # Configuration to ensure Netdata listens on localhost for Nginx proxy
  cat > "$netdata_conf_dir/netdata.conf" << EOF
# Netdata configuration
# Generated by netdata_config.sh

[global]
  hostname = ${NETDATA_HOSTNAME:-PostgreSQL Server}

[web]
  bind to = 127.0.0.1
  allow connections from = localhost 127.0.0.1
  allow dashboard from = localhost 127.0.0.1
  default port = 19999
EOF
  
  # Configure health alerts
  log_info "Configuring Netdata health alerts..."
  
  # Create health_alarm_notify.conf for email configuration
  local health_conf_dir="$netdata_conf_dir/health_alarm_notify.conf"
  
  # Backup the original file
  if [ -f "$health_conf_dir" ]; then
    cp "$health_conf_dir" "$health_conf_dir.bak" 2>/dev/null
  fi
  
  # Configure email alerts
  cat > "$health_conf_dir" << EOF
# Netdata health notification configuration
# Generated by netdata_config.sh

SEND_EMAIL="YES"
EMAIL_SENDER="${NETDATA_EMAIL_SENDER:-netdata@localhost}"
DEFAULT_RECIPIENT_EMAIL="${NETDATA_EMAIL_RECIPIENT:-root}"

# The SMTP server configuration
SMTP_SERVER="${NETDATA_SMTP_SERVER:-localhost}"
SMTP_PORT=${NETDATA_SMTP_PORT:-25}
SMTP_TLS="${NETDATA_SMTP_TLS:-YES}"
SMTP_USERNAME="${NETDATA_SMTP_USERNAME:-}"
SMTP_PASSWORD="${NETDATA_SMTP_PASSWORD:-}"
EOF
  
  # Create custom threshold alarms for CPU, memory, and disk usage
  log_info "Setting up resource utilization alarms..."
  
  mkdir -p "$netdata_conf_dir/health.d" 2>/dev/null
  
  # CPU usage alarm
  cat > "$netdata_conf_dir/health.d/cpu_usage.conf" << EOF
# CPU usage alarm at 80%
# Generated by netdata_config.sh

alarm: cpu_usage_80
      on: system.cpu
      os: linux
  lookup: average -1m percentage of user,system,softirq,irq,guest
   units: %
   every: 1m
    warn: \$this > 80
    crit: \$this > 90
   delay: up 0 down 5m
    info: CPU utilization over 80%
EOF
  
  # Memory usage alarm
  cat > "$netdata_conf_dir/health.d/ram_usage.conf" << EOF
# Memory usage alarm at 80%
# Generated by netdata_config.sh

alarm: ram_usage_80
      on: system.ram
      os: linux
  lookup: average -1m percentage of used
   units: %
   every: 1m
    warn: \$this > 80
    crit: \$this > 90
   delay: up 0 down 5m
    info: RAM utilization over 80%
EOF
  
  # Disk usage alarm
  cat > "$netdata_conf_dir/health.d/disk_usage.conf" << EOF
# Disk usage alarm at 80%
# Generated by netdata_config.sh

alarm: disk_usage_80
      on: disk.space
      os: linux
  lookup: average -1m percentage of used
   units: %
   every: 1m
    warn: \$this > 80
    crit: \$this > 90
   delay: up 0 down 5m
    info: Disk utilization over 80%
EOF
  
  # Restart Netdata to apply new configuration
  log_info "Restarting Netdata service..."
  systemctl restart netdata > /dev/null 2>&1
  
  log_info "Netdata configuration completed successfully"
}

# Configure Nginx to proxy Netdata securely
configure_nginx_for_netdata() {
  log_info "Configuring Nginx as proxy for Netdata..."
  
  # Check if Nginx is installed
  if ! command -v nginx >/dev/null 2>&1; then
    log_error "Nginx is not installed, cannot configure proxy for Netdata"
    return 1
  fi
  
  local domain="${NGINX_DOMAIN:-localhost}"
  local nginx_conf="/etc/nginx/sites-available/netdata"
  
  # Create Nginx configuration for Netdata
  cat > "$nginx_conf" << EON
# Netdata monitoring via Nginx
# Generated by netdata_config.sh

upstream netdata {
    server 127.0.0.1:19999;
    keepalive 64;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name monitor.$domain;

    location / {
        return 301 https://\$host\$request_uri;
    }
}

# Netdata over HTTPS
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name monitor.$domain;

EON
  
  # Certificate paths - prioritize Let's Encrypt, check for wildcard certs, fallback to self-signed
  local cert_found=false
  
  # Check for Let's Encrypt certificates (try wildcard first, then specific domain)
  if [ -f "/etc/letsencrypt/live/$domain/fullchain.pem" ]; then
    cat >> "$nginx_conf" << EOC
    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;
EOC
    cert_found=true
    log_info "Using Let's Encrypt certificate for $domain"
  elif [ -f "/etc/letsencrypt/live/*/fullchain.pem" ]; then
    # Use any available Let's Encrypt certificate (wildcard support)
    local cert_dir=$(find /etc/letsencrypt/live -name "fullchain.pem" | head -1 | xargs dirname)
    if [ -n "$cert_dir" ]; then
      cat >> "$nginx_conf" << EOC
    ssl_certificate $cert_dir/fullchain.pem;
    ssl_certificate_key $cert_dir/privkey.pem;
EOC
      cert_found=true
      log_info "Using available Let's Encrypt certificate from $cert_dir"
    fi
  fi
  
  # Fallback to self-signed if no Let's Encrypt certificates found
  if [ "$cert_found" = "false" ]; then
    cat >> "$nginx_conf" << EOC
    ssl_certificate /etc/nginx/ssl/$domain.crt;
    ssl_certificate_key /etc/nginx/ssl/$domain.key;
EOC
    log_info "Using self-signed certificate for $domain"
  fi
  
  # Complete the Nginx configuration
  cat >> "$nginx_conf" << EOC

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Basic auth protection
    auth_basic "Netdata Monitoring";
    auth_basic_user_file /etc/nginx/.htpasswd.netdata;

    # Security Headers for Netdata
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Rate limiting for Netdata access
    limit_req zone=general_limit burst=15 nodelay;
    limit_conn conn_limit_per_ip 5;

    # Proxy to Netdata
    location / {
        proxy_pass http://netdata;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Server \$host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header Connection "keep-alive";
        
        # Additional proxy settings to fix 502 errors
        proxy_buffers 8 32k;
        proxy_buffer_size 64k;
        proxy_connect_timeout 30s;
        proxy_send_timeout 90s;
        proxy_read_timeout 90s;
        
        # Allow websocket connections
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";

        gzip on;
        gzip_proxied any;
        gzip_types *;
    }
}
EOC
  
  log_info "Nginx configuration created for Netdata: $nginx_conf"
  
  # Create htpasswd file for basic authentication
  local htpasswd_file="/etc/nginx/.htpasswd.netdata"
  local admin_user="${NETDATA_ADMIN_USER:-admin}"
  local admin_pass="${NETDATA_ADMIN_PASSWORD:-$(tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 12)}"
  
  # Install apache2-utils if needed for htpasswd
  if ! command -v htpasswd >/dev/null 2>&1; then
    log_info "Installing apache2-utils for htpasswd..."
    apt-get install -y -qq apache2-utils > /dev/null 2>&1
  fi
  
  # Create htpasswd file
  htpasswd -bc "$htpasswd_file" "$admin_user" "$admin_pass" > /dev/null 2>&1
  
  # Save credentials to a file for easy retrieval during testing
  echo "NETDATA_ADMIN_USER=$admin_user" > /etc/netdata/netdata_credentials.txt
  echo "NETDATA_ADMIN_PASSWORD=$admin_pass" >> /etc/netdata/netdata_credentials.txt
  chmod 600 /etc/netdata/netdata_credentials.txt
  
  log_info "Created basic auth credentials for Netdata (User: $admin_user)"
  log_info "Password for Netdata access: [REDACTED - check /etc/nginx/.htpasswd or conf/user.env]"
  
  # Create symbolic link to enable site
  if [ ! -f "/etc/nginx/sites-enabled/netdata" ]; then
    ln -s "$nginx_conf" "/etc/nginx/sites-enabled/netdata"
    log_info "Nginx site for Netdata enabled"
  fi
  
  # Test Nginx configuration
  if ! nginx -t > /dev/null 2>&1; then
    log_error "Nginx configuration test failed"
    nginx -t  # Show the actual error
    return 1
  fi
  
  # Configure firewall if enabled
  if [ "${CONFIGURE_FIREWALL:-true}" = "true" ]; then
    log_info "Configuring firewall for Netdata..."
    # Block direct access to Netdata port
    ufw deny 19999/tcp comment "block direct netdata connections" > /dev/null 2>&1
    log_info "Firewall configured for Netdata"
  fi
  
  # Reload Nginx to apply configuration
  systemctl reload nginx > /dev/null 2>&1
  
  log_info "Nginx configured successfully as proxy for Netdata"
  log_info "Netdata is now accessible at https://monitor.$domain with basic authentication"
}

# Configure PostgreSQL monitoring for Netdata
configure_postgres_for_netdata() {
  log_info "Configuring PostgreSQL for Netdata monitoring..."
  
  # Check if PostgreSQL is running
  if ! systemctl is-active --quiet postgresql; then
    log_warn "PostgreSQL service is not running, skipping PostgreSQL monitoring configuration"
    return 0
  fi
  
  # Generate a secure random password for netdata PostgreSQL user
  local NETDATA_PG_PASSWORD=$(tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 16)
  
  log_info "Creating netdata user in PostgreSQL..."
  
  # Execute SQL commands as postgres user
  if ! execute_pg_command "postgres" "CREATE USER netdata WITH PASSWORD '$NETDATA_PG_PASSWORD';"; then
    log_info "netdata user already exists, updating password..."
    if ! execute_pg_command "postgres" "ALTER USER netdata WITH PASSWORD '$NETDATA_PG_PASSWORD';"; then
      log_error "Failed to create/update netdata user in PostgreSQL"
      return 1
    fi
  fi
  
  # Grant necessary permissions for monitoring
  log_info "Granting necessary permissions to netdata user..."
  execute_pg_command "postgres" "GRANT CONNECT ON DATABASE postgres TO netdata;" || true
  if ! execute_pg_command "postgres" "GRANT pg_read_all_stats TO netdata;"; then
    # For older PostgreSQL versions that don't have pg_read_all_stats role
    log_info "pg_read_all_stats role not available, using alternative permissions..."
    execute_pg_command "postgres" "GRANT pg_monitor TO netdata;" || true
  fi
  
  # Update pg_hba.conf to allow netdata to connect with password
  log_info "Updating PostgreSQL client authentication configuration..."
  local PG_HBA_CONF="/etc/postgresql/17/main/pg_hba.conf"
  
  # Backup the pg_hba.conf file before modifying
  if [ -f "$PG_HBA_CONF" ]; then
    cp "$PG_HBA_CONF" "${PG_HBA_CONF}.bak" 2>/dev/null || true
    
    # Add netdata user entry if not already present
    if ! grep -q "netdata" "$PG_HBA_CONF"; then
      echo "# Allow netdata user to connect with password authentication for monitoring" >> "$PG_HBA_CONF"
      echo "host    all             netdata         127.0.0.1/32            scram-sha-256" >> "$PG_HBA_CONF"
      log_info "Added netdata user to PostgreSQL client authentication configuration"
      
      # Reload PostgreSQL to apply authentication changes
      systemctl reload postgresql || {
        log_error "Failed to reload PostgreSQL configuration"
        return 1
      }
    else
      log_info "netdata user already present in PostgreSQL authentication configuration"
    fi
  else
    log_warn "PostgreSQL HBA configuration file not found at $PG_HBA_CONF"
    # Try to find pg_hba.conf in other locations
    PG_HBA_CONF=$(find /etc/postgresql -name pg_hba.conf | head -n 1)
    if [ -n "$PG_HBA_CONF" ]; then
      log_info "Found pg_hba.conf at $PG_HBA_CONF"
      
      # Backup and modify the found file
      cp "$PG_HBA_CONF" "${PG_HBA_CONF}.bak" 2>/dev/null || true
      
      if ! grep -q "netdata" "$PG_HBA_CONF"; then
        echo "# Allow netdata user to connect with password authentication for monitoring" >> "$PG_HBA_CONF"
        echo "host    all             netdata         127.0.0.1/32            scram-sha-256" >> "$PG_HBA_CONF"
        log_info "Added netdata user to PostgreSQL client authentication configuration"
        
        # Reload PostgreSQL to apply authentication changes
        systemctl reload postgresql || {
          log_error "Failed to reload PostgreSQL configuration"
          return 1
        }
      fi
    else
      log_warn "Could not find pg_hba.conf in /etc/postgresql, skipping client authentication configuration"
    fi
  fi
  
  # Configure netdata to use the created PostgreSQL user
  log_info "Configuring netdata for PostgreSQL monitoring..."
  local netdata_conf_dir="/etc/netdata"
  mkdir -p "$netdata_conf_dir/go.d" 2>/dev/null || true
  
  # Create/update PostgreSQL configuration for netdata
  cat > "$netdata_conf_dir/go.d/postgres.conf" << EOF
# Netdata PostgreSQL monitoring configuration
# Generated by netdata_config.sh

jobs:
  - name: local
    dsn: 'postgresql://netdata:$NETDATA_PG_PASSWORD@127.0.0.1:5432/postgres'
    collect_databases_matching: '*'
EOF
  
  # Create/update pgbouncer configuration for netdata if pgbouncer is installed
  if systemctl is-active --quiet pgbouncer; then
    log_info "Configuring pgbouncer monitoring..."
    
    # Add netdata user to pgbouncer userlist.txt
    local PGBOUNCER_USERLIST="/etc/pgbouncer/userlist.txt"
    
    if [ -f "$PGBOUNCER_USERLIST" ]; then
      # Extract password hash for netdata user
      local NETDATA_PGHASH=$(sudo -u postgres psql -t -c "SELECT passwd FROM pg_shadow WHERE usename='netdata';")
      NETDATA_PGHASH=$(echo $NETDATA_PGHASH | tr -d ' ')
      
      if [ -n "$NETDATA_PGHASH" ]; then
        # Check if netdata user already exists in pgbouncer userlist
        if ! grep -q "\"netdata\"" "$PGBOUNCER_USERLIST"; then
          echo "\"netdata\" \"$NETDATA_PGHASH\"" >> "$PGBOUNCER_USERLIST"
          log_info "Added netdata user to pgbouncer authentication file"
          
          # Reload pgbouncer to apply changes
          systemctl reload pgbouncer || {
            log_warn "Failed to reload pgbouncer, changes will take effect after restart"
          }
        else
          log_info "netdata user already present in pgbouncer authentication file"
        fi
      else
        log_warn "Could not retrieve password hash for netdata user, skipping pgbouncer configuration"
      fi
    else
      log_warn "pgbouncer userlist file not found at $PGBOUNCER_USERLIST"
    fi
    
    # Configure netdata for pgbouncer monitoring
    cat > "$netdata_conf_dir/go.d/pgbouncer.conf" << EOF
# Netdata pgbouncer monitoring configuration
# Generated by netdata_config.sh

jobs:
  - name: local
    dsn: 'postgresql://netdata:$NETDATA_PG_PASSWORD@127.0.0.1:6432/pgbouncer'
EOF
  fi
  
  # Set proper ownership and permissions for netdata configuration files
  chown -R netdata:netdata "$netdata_conf_dir/go.d" 2>/dev/null || true
  chmod 640 "$netdata_conf_dir/go.d/postgres.conf" 2>/dev/null || true
  
  if [ -f "$netdata_conf_dir/go.d/pgbouncer.conf" ]; then
    chmod 640 "$netdata_conf_dir/go.d/pgbouncer.conf" 2>/dev/null || true
  fi
  
  log_info "PostgreSQL monitoring configuration for Netdata completed successfully"
  return 0
}

# Main function to install and configure Netdata
setup_netdata() {
  log_info "Setting up Netdata system monitoring..."
  
  # Check if Netdata is already running properly
  if systemctl is-active --quiet netdata 2>/dev/null; then
    log_info "Netdata service is already running, proceeding with configuration"
  else
    log_info "Netdata service not running, installing and configuring"
  fi
  
  # Track feature availability
  local netdata_installed=false
  local netdata_configured=false
  local nginx_configured=false
  local postgres_configured=false
  
  # Install Netdata
  install_netdata && netdata_installed=true || {
    log_error "Failed to install Netdata, cannot continue with setup"
    return 1
  }
  
  # Only continue with configuration if Netdata was installed
  if [ "$netdata_installed" = "true" ]; then
    # Configure Netdata
    configure_netdata && netdata_configured=true || {
      log_warn "Failed to fully configure Netdata, but will try to continue with basic functionality"
      
      # Try minimal configuration
      log_info "Applying minimal Netdata configuration..."
      
      # Create minimal configuration to ensure it listens only on localhost
      local netdata_conf_dir="/etc/netdata"
      if [ -d "$netdata_conf_dir" ]; then
        cat > "$netdata_conf_dir/netdata.conf" << EOF
# Minimal Netdata configuration
# Generated by netdata_config.sh recovery

[global]
  hostname = ${NETDATA_HOSTNAME:-PostgreSQL Server}

[web]
  bind to = 127.0.0.1
  allow connections from = localhost 127.0.0.1
EOF
        
        # Try to restart with minimal config
        systemctl restart netdata > /dev/null 2>&1 && {
          log_info "Applied minimal Netdata configuration successfully"
          netdata_configured=true
        }
      fi
    }
    
    # Configure PostgreSQL for Netdata monitoring
    configure_postgres_for_netdata && postgres_configured=true || {
      log_warn "Failed to configure PostgreSQL monitoring for Netdata, but will continue with setup"
    }

    # Configure Nginx as proxy for Netdata if Nginx is available
    if command -v nginx >/dev/null 2>&1; then
      configure_nginx_for_netdata && nginx_configured=true || {
        log_warn "Failed to configure Nginx as proxy for Netdata, but Netdata is still usable directly at http://localhost:19999"
        
        # Try minimal Nginx configuration for Netdata
        if [ -d "/etc/nginx" ] && [ -d "/etc/nginx/sites-available" ]; then
          log_info "Attempting minimal Nginx configuration for Netdata..."
          local minimal_conf="/etc/nginx/sites-available/netdata-minimal"
          cat > "$minimal_conf" << EOF
# Minimal Netdata proxy configuration
# Generated by netdata_config.sh fallback

server {
    listen 80;
    server_name netdata monitor localhost;
    
    location / {
        proxy_pass http://127.0.0.1:19999;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_http_version 1.1;
    }
}
EOF
          
          # Enable the minimal configuration
          if [ ! -f "/etc/nginx/sites-enabled/netdata-minimal" ]; then
            ln -s "$minimal_conf" "/etc/nginx/sites-enabled/netdata-minimal" 2>/dev/null || true
          fi
          
          # Test and reload Nginx
          if nginx -t > /dev/null 2>&1; then
            systemctl reload nginx > /dev/null 2>&1 || systemctl restart nginx > /dev/null 2>&1
            log_info "Applied minimal Nginx configuration for Netdata"
            nginx_configured=true
          fi
        fi
      }
    else
      log_warn "Nginx not found, skipping Nginx configuration for Netdata"
      log_info "Netdata is accessible directly at http://localhost:19999"
    fi
    
    # Verify Netdata is running after setup
    if ! systemctl is-active --quiet netdata 2>/dev/null; then
      log_warn "Netdata service is not running after setup"
      log_info "Attempting to start Netdata service..."
      if ! systemctl start netdata > /dev/null 2>&1; then
        log_error "Failed to start Netdata service"
        # Try starting from command line as a last resort
        if [ -f "/usr/sbin/netdata" ]; then
          log_info "Attempting to start Netdata directly..."
          nohup /usr/sbin/netdata > /dev/null 2>&1 &
          sleep 2
          if pgrep -x "netdata" > /dev/null; then
            log_info "Netdata started directly as a process"
            netdata_configured=true
          else
            log_error "Failed to start Netdata through all methods"
          fi
        fi
      else
        log_info "Netdata service started successfully"
        netdata_configured=true
      fi
    fi
  fi
  
  # Print setup summary
  log_info "-----------------------------------------------"
  log_info "NETDATA SETUP SUMMARY"
  log_info "-----------------------------------------------"
  if [ "$netdata_installed" = "true" ]; then
    log_info "✓ Netdata installation: SUCCESS"
  else
    log_error "✗ Netdata installation: FAILED"
  fi
  
  if [ "$netdata_configured" = "true" ]; then
    log_info "✓ Netdata configuration: SUCCESS"
  else
    log_error "✗ Netdata configuration: FAILED"
  fi
  
  if [ "$postgres_configured" = "true" ]; then
    log_info "✓ PostgreSQL monitoring configuration: SUCCESS"
  else
    log_warn "⚠ PostgreSQL monitoring configuration: NOT CONFIGURED"
  fi
  
  if [ "$nginx_configured" = "true" ]; then
    log_info "✓ Nginx proxy configuration: SUCCESS"
    log_info "Monitor your system at https://monitor.${NGINX_DOMAIN:-localhost}"
  else
    log_warn "⚠ Nginx proxy configuration: NOT CONFIGURED"
    log_info "Access Netdata directly at http://localhost:19999"
  fi
  log_info "-----------------------------------------------"
  
  # Return success if at least Netdata was installed
  if [ "$netdata_installed" = "true" ]; then
    log_info "Netdata setup completed"
    if [ "$netdata_configured" = "true" ] && [ "$nginx_configured" = "true" ] && [ "$postgres_configured" = "true" ]; then
      log_info "Full Netdata setup with web access completed successfully"
    else
      log_warn "Netdata setup completed with limited functionality"
    fi
    return 0
  else
    log_error "Netdata setup failed"
    return 1
  fi
}

# If script is run directly, execute setup
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  setup_netdata
fi 