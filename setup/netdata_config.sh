#!/bin/bash
# netdata_config.sh - Installs and configures Netdata for system resource monitoring
# Part of Milestone 4
# This script installs and configures Netdata to monitor system resources via HTTPS
# and send email alerts when resource usage exceeds thresholds

# Exit immediately if a command exits with a non-zero status
set -e

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/../lib"

# Check if lib directory exists
if [ ! -d "$LIB_DIR" ]; then
  # Try parent directory
  LIB_DIR="$(dirname "$SCRIPT_DIR")/lib"
  
  if [ ! -d "$LIB_DIR" ]; then
    echo "ERROR: Unable to locate lib directory"
    exit 1
  fi
fi

# Source the logger functions
if [ -f "$LIB_DIR/logger.sh" ]; then
  source "$LIB_DIR/logger.sh"
else
  echo "ERROR: Logger library not found at $LIB_DIR/logger.sh"
  exit 1
fi

# Source utilities
if [ -f "$LIB_DIR/utilities.sh" ]; then
  source "$LIB_DIR/utilities.sh"
else
  echo "ERROR: Utilities library not found at $LIB_DIR/utilities.sh"
  exit 1
fi

# Install Netdata if not already installed
install_netdata() {
  log_info "Installing Netdata..."
  
  # Check if Netdata is already installed
  if command -v netdata >/dev/null 2>&1; then
    log_info "Netdata is already installed, skipping installation"
    return 0
  fi
  
  # Install dependencies
  log_info "Installing Netdata dependencies..."
  apt-get update -qq > /dev/null 2>&1
  DEBIAN_FRONTEND=noninteractive apt-get install -y -qq curl wget > /dev/null 2>&1
  
  # Install Netdata using the official script with automatic defaults
  log_info "Downloading and running Netdata installer..."
  bash <(curl -Ss https://get.netdata.cloud/kickstart.sh) --non-interactive --stable-channel --disable-telemetry --disable-cloud > /dev/null 2>&1 || {
    log_error "Failed to install Netdata"
    return 1
  }
  
  log_info "Netdata installed successfully"
}

# Configure Netdata to use HTTPS only and set up email alerts
configure_netdata() {
  log_info "Configuring Netdata..."
  
  # Check if Netdata is installed properly
  if ! command -v netdata >/dev/null 2>&1; then
    log_error "Netdata is not installed, cannot configure"
    return 1
  fi
  
  # Get the configuration directory
  local netdata_conf_dir="/etc/netdata"
  
  # Ensure the configuration directory exists
  if [ ! -d "$netdata_conf_dir" ]; then
    log_error "Netdata configuration directory not found: $netdata_conf_dir"
    return 1
  fi
  
  # Backup original configuration files
  if [ -f "$netdata_conf_dir/netdata.conf" ]; then
    cp "$netdata_conf_dir/netdata.conf" "$netdata_conf_dir/netdata.conf.bak" 2>/dev/null
  fi
  
  # Create or update the main configuration file
  log_info "Updating Netdata main configuration..."
  
  # Configuration to disable direct access and use Nginx as a proxy
  cat > "$netdata_conf_dir/netdata.conf" << EOF
# Netdata configuration
# Generated by netdata_config.sh

[global]
  hostname = ${NETDATA_HOSTNAME:-PostgreSQL Server}

[web]
  mode = none
  allow netdata from = localhost fd* 127.* 10.* 192.168.* 172.16.* 172.17.* 172.18.* 172.19.* 172.20.* 172.21.* 172.22.* 172.23.* 172.24.* 172.25.* 172.26.* 172.27.* 172.28.* 172.29.* 172.30.* 172.31.*
  bind to = 127.0.0.1
  allow connections from = localhost
  disconnect idle clients after seconds = 3600
  timeout for first request = 60
EOF
  
  # Configure health alerts
  log_info "Configuring Netdata health alerts..."
  
  # Create health_alarm_notify.conf for email configuration
  local health_conf_dir="$netdata_conf_dir/health_alarm_notify.conf"
  
  # Backup the original file
  if [ -f "$health_conf_dir" ]; then
    cp "$health_conf_dir" "$health_conf_dir.bak" 2>/dev/null
  fi
  
  # Configure email alerts
  cat > "$health_conf_dir" << EOF
# Netdata health notification configuration
# Generated by netdata_config.sh

SEND_EMAIL="YES"
EMAIL_SENDER="${NETDATA_EMAIL_SENDER:-netdata@localhost}"
DEFAULT_RECIPIENT_EMAIL="${NETDATA_EMAIL_RECIPIENT:-root}"

# The SMTP server configuration
SMTP_SERVER="${NETDATA_SMTP_SERVER:-localhost}"
SMTP_PORT=${NETDATA_SMTP_PORT:-25}
SMTP_TLS="${NETDATA_SMTP_TLS:-YES}"
SMTP_USERNAME="${NETDATA_SMTP_USERNAME:-}"
SMTP_PASSWORD="${NETDATA_SMTP_PASSWORD:-}"
EOF
  
  # Create custom threshold alarms for CPU, memory, and disk usage
  log_info "Setting up resource utilization alarms..."
  
  mkdir -p "$netdata_conf_dir/health.d" 2>/dev/null
  
  # CPU usage alarm
  cat > "$netdata_conf_dir/health.d/cpu_usage.conf" << EOF
# CPU usage alarm at 80%
# Generated by netdata_config.sh

alarm: cpu_usage_80
      on: system.cpu
      os: linux
  lookup: average -1m percentage of user,system,softirq,irq,guest
   units: %
   every: 1m
    warn: \$this > 80
    crit: \$this > 90
   delay: up 0 down 5m
    info: CPU utilization over 80%
 options: no-clear-notification
EOF
  
  # Memory usage alarm
  cat > "$netdata_conf_dir/health.d/ram_usage.conf" << EOF
# Memory usage alarm at 80%
# Generated by netdata_config.sh

alarm: ram_usage_80
      on: system.ram
      os: linux
  lookup: average -1m percentage of used
   units: %
   every: 1m
    warn: \$this > 80
    crit: \$this > 90
   delay: up 0 down 5m
    info: RAM utilization over 80%
 options: no-clear-notification
EOF
  
  # Disk usage alarm
  cat > "$netdata_conf_dir/health.d/disk_usage.conf" << EOF
# Disk usage alarm at 80%
# Generated by netdata_config.sh

alarm: disk_usage_80
      on: disk.space
      os: linux
  lookup: average -1m percentage of used
   units: %
   every: 1m
    warn: \$this > 80
    crit: \$this > 90
   delay: up 0 down 5m
    info: Disk utilization over 80%
 options: no-clear-notification
EOF
  
  # Restart Netdata to apply new configuration
  log_info "Restarting Netdata service..."
  systemctl restart netdata > /dev/null 2>&1
  
  log_info "Netdata configuration completed successfully"
}

# Configure Nginx to proxy Netdata securely
configure_nginx_for_netdata() {
  log_info "Configuring Nginx as proxy for Netdata..."
  
  # Check if Nginx is installed
  if ! command -v nginx >/dev/null 2>&1; then
    log_error "Nginx is not installed, cannot configure proxy for Netdata"
    return 1
  }
  
  local domain="${NGINX_DOMAIN:-localhost}"
  local nginx_conf="/etc/nginx/sites-available/netdata"
  
  # Create Nginx configuration for Netdata
  cat > "$nginx_conf" << EON
# Netdata monitoring via Nginx
# Generated by netdata_config.sh

upstream netdata {
    server 127.0.0.1:19999;
    keepalive 64;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name monitor.$domain;

    location / {
        return 301 https://\$host\$request_uri;
    }
}

# Netdata over HTTPS
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name monitor.$domain;

EON
  
  # Certificate paths - use Let's Encrypt paths first, fallback to self-signed
  if [ -f "/etc/letsencrypt/live/$domain/fullchain.pem" ]; then
    cat >> "$nginx_conf" << EOC
    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;
EOC
  else
    cat >> "$nginx_conf" << EOC
    ssl_certificate /etc/nginx/ssl/$domain.crt;
    ssl_certificate_key /etc/nginx/ssl/$domain.key;
EOC
  fi
  
  # Complete the Nginx configuration
  cat >> "$nginx_conf" << EOC

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Basic auth protection
    auth_basic "Netdata Monitoring";
    auth_basic_user_file /etc/nginx/.htpasswd.netdata;

    # Proxy to Netdata
    location / {
        proxy_pass http://netdata;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Server \$host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_http_version 1.1;
        proxy_pass_request_headers on;
        proxy_set_header Connection "keep-alive";
        proxy_store off;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        gzip on;
        gzip_proxied any;
        gzip_types *;
    }
}
EOC
  
  log_info "Nginx configuration created for Netdata: $nginx_conf"
  
  # Create htpasswd file for basic authentication
  local htpasswd_file="/etc/nginx/.htpasswd.netdata"
  local admin_user="${NETDATA_ADMIN_USER:-admin}"
  local admin_pass="${NETDATA_ADMIN_PASSWORD:-$(tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 12)}"
  
  # Install apache2-utils if needed for htpasswd
  if ! command -v htpasswd >/dev/null 2>&1; then
    log_info "Installing apache2-utils for htpasswd..."
    apt-get install -y -qq apache2-utils > /dev/null 2>&1
  fi
  
  # Create htpasswd file
  htpasswd -bc "$htpasswd_file" "$admin_user" "$admin_pass" > /dev/null 2>&1
  
  log_info "Created basic auth credentials for Netdata (User: $admin_user)"
  log_info "Password for Netdata access: $admin_pass"
  
  # Create symbolic link to enable site
  if [ ! -f "/etc/nginx/sites-enabled/netdata" ]; then
    ln -s "$nginx_conf" "/etc/nginx/sites-enabled/netdata"
    log_info "Nginx site for Netdata enabled"
  fi
  
  # Test Nginx configuration
  if ! nginx -t > /dev/null 2>&1; then
    log_error "Nginx configuration test failed"
    nginx -t  # Show the actual error
    return 1
  fi
  
  # Configure firewall if enabled
  if [ "${CONFIGURE_FIREWALL:-true}" = "true" ]; then
    log_info "Configuring firewall for Netdata..."
    # Block direct access to Netdata port
    ufw deny 19999/tcp comment "block direct netdata connections" > /dev/null 2>&1
    log_info "Firewall configured for Netdata"
  fi
  
  # Reload Nginx to apply configuration
  systemctl reload nginx > /dev/null 2>&1
  
  log_info "Nginx configured successfully as proxy for Netdata"
  log_info "Netdata is now accessible at https://monitor.$domain with basic authentication"
}

# Main function to install and configure Netdata
setup_netdata() {
  log_info "Setting up Netdata system monitoring..."
  
  # Install Netdata
  install_netdata
  
  # Configure Netdata
  configure_netdata
  
  # Configure Nginx as proxy for Netdata
  configure_nginx_for_netdata
  
  log_info "Netdata setup completed successfully"
  log_info "Monitor your system at https://monitor.${NGINX_DOMAIN:-localhost}"
  log_info "Email alerts will be sent when CPU, RAM, or disk usage exceeds 80%"
}

# If script is run directly, execute setup
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  setup_netdata
fi 