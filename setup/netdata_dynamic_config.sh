#!/bin/bash
# netdata_dynamic_config.sh - Dynamic Netdata configuration based on actual system specs
# Fixes hardcoded values in Netdata configuration

# Exit immediately if a command exits with a non-zero status
set -e

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/../lib"

# Source required libraries
source "$LIB_DIR/logger.sh"
source "$LIB_DIR/utilities.sh"

# Source dynamic optimization functions for hardware detection
if [ -f "$SCRIPT_DIR/dynamic_optimization.sh" ]; then
    source "$SCRIPT_DIR/dynamic_optimization.sh"
else
    log_error "dynamic_optimization.sh not found - cannot detect hardware specs"
    exit 1
fi

# Configure Netdata with dynamic system specifications
configure_netdata_dynamic() {
    log_info "Configuring Netdata with dynamic system specifications..."
    
    local netdata_conf_dir="/etc/netdata"
    
    # Ensure Netdata configuration directory exists
    if [ ! -d "$netdata_conf_dir" ]; then
        log_error "Netdata configuration directory not found: $netdata_conf_dir"
        return 1
    fi
    
    # Detect actual system specifications
    local cpu_cores=$(detect_cpu_cores)
    local total_memory_mb=$(detect_total_memory)
    local disk_size_gb=$(detect_disk_size)
    
    log_info "Detected system specs: $cpu_cores cores, $total_memory_mb MB RAM, $disk_size_gb GB disk"
    
    # Update CPU alarm thresholds based on actual cores
    local cpu_threshold_warn=80
    local cpu_threshold_crit=90
    
    # Adjust thresholds for systems with many cores (reduce sensitivity)
    if [ "$cpu_cores" -gt 8 ]; then
        cpu_threshold_warn=85
        cpu_threshold_crit=95
    elif [ "$cpu_cores" -gt 16 ]; then
        cpu_threshold_warn=90
        cpu_threshold_crit=97
    fi
    
    # Update RAM alarm thresholds based on actual memory
    local ram_threshold_warn=80
    local ram_threshold_crit=90
    
    # Adjust thresholds for systems with large amounts of RAM
    if [ "$total_memory_mb" -gt 16384 ]; then  # > 16GB
        ram_threshold_warn=85
        ram_threshold_crit=92
    elif [ "$total_memory_mb" -gt 32768 ]; then  # > 32GB
        ram_threshold_warn=88
        ram_threshold_crit=95
    fi
    
    # Update disk alarm thresholds based on actual disk size
    local disk_threshold_warn=80
    local disk_threshold_crit=90
    
    # Adjust thresholds for larger disks
    if [ "$disk_size_gb" -gt 500 ]; then
        disk_threshold_warn=85
        disk_threshold_crit=92
    elif [ "$disk_size_gb" -gt 1000 ]; then
        disk_threshold_warn=88
        disk_threshold_crit=95
    fi
    
    # Create dynamic health configuration directory
    mkdir -p "$netdata_conf_dir/health.d" 2>/dev/null
    
    # Generate dynamic CPU usage alarm
    cat > "$netdata_conf_dir/health.d/cpu_usage_dynamic.conf" << EOF
# Dynamic CPU usage alarm based on actual system specs
# Generated by netdata_dynamic_config.sh
# System: $cpu_cores cores detected

alarm: cpu_usage_dynamic
      on: system.cpu
      os: linux
  lookup: average -1m percentage of user,system,softirq,irq,guest
   units: %
   every: 1m
    warn: \$this > $cpu_threshold_warn
    crit: \$this > $cpu_threshold_crit
   delay: up 0 down 5m
    info: CPU utilization over $cpu_threshold_warn% (system has $cpu_cores cores)
EOF
    
    # Generate dynamic RAM usage alarm
    cat > "$netdata_conf_dir/health.d/ram_usage_dynamic.conf" << EOF
# Dynamic RAM usage alarm based on actual system specs
# Generated by netdata_dynamic_config.sh
# System: $total_memory_mb MB RAM detected

alarm: ram_usage_dynamic
      on: system.ram
      os: linux
  lookup: average -1m percentage of used
   units: %
   every: 1m
    warn: \$this > $ram_threshold_warn
    crit: \$this > $ram_threshold_crit
   delay: up 0 down 5m
    info: RAM utilization over $ram_threshold_warn% (system has $total_memory_mb MB)
EOF
    
    # Generate dynamic disk usage alarm
    cat > "$netdata_conf_dir/health.d/disk_usage_dynamic.conf" << EOF
# Dynamic disk usage alarm based on actual system specs
# Generated by netdata_dynamic_config.sh
# System: $disk_size_gb GB disk detected

alarm: disk_usage_dynamic
      on: disk.space
      os: linux
  lookup: average -1m percentage of used
   units: %
   every: 1m
    warn: \$this > $disk_threshold_warn
    crit: \$this > $disk_threshold_crit
   delay: up 0 down 5m
    info: Disk utilization over $disk_threshold_warn% (system has $disk_size_gb GB)
EOF
    
    # Remove old static configuration files
    rm -f "$netdata_conf_dir/health.d/cpu_usage.conf" 2>/dev/null || true
    rm -f "$netdata_conf_dir/health.d/ram_usage.conf" 2>/dev/null || true
    rm -f "$netdata_conf_dir/health.d/disk_usage.conf" 2>/dev/null || true
    
    log_info "Dynamic Netdata configuration created successfully"
    log_info "CPU thresholds: warn=$cpu_threshold_warn%, crit=$cpu_threshold_crit%"
    log_info "RAM thresholds: warn=$ram_threshold_warn%, crit=$ram_threshold_crit%"
    log_info "Disk thresholds: warn=$disk_threshold_warn%, crit=$disk_threshold_crit%"
    
    # Restart Netdata to apply new configuration
    log_info "Restarting Netdata to apply dynamic configuration..."
    systemctl restart netdata > /dev/null 2>&1 || {
        log_warn "Failed to restart Netdata service"
        return 1
    }
    
    log_info "Netdata dynamic configuration completed successfully"
    return 0
}

# Main function
setup_netdata_dynamic() {
    log_info "Setting up dynamic Netdata configuration..."
    
    if configure_netdata_dynamic; then
        log_info "Dynamic Netdata configuration setup completed successfully"
        return 0
    else
        log_error "Dynamic Netdata configuration setup failed"
        return 1
    fi
}

# If script is run directly, execute setup
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    setup_netdata_dynamic
fi
